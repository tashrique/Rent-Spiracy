"use client";

import { useState, useEffect } from "react";
import LanguageSelector from "../components/LanguageSelector";
import LanguageSwitcher from "../components/LanguageSwitcher";
import ScamDetectionForm from "../components/ScamDetectionForm";
import ScamDetectionResults from "../components/ScamDetectionResults";
import { ScamDetectionResponse } from "../services/api";
import apiService from "../services/api";

type Language =
  | "english"
  | "chinese"
  | "hindi"
  | "spanish"
  | "korean"
  | "bengali";
type Step = "language" | "form" | "results";

// Fun quotes about scams in different languages
const funQuotes = {
  english: [
    "If it sounds too good to be true, it probably comes with hidden cameras and a TV host.",
    "Scammers are like bad magicians - once you know the trick, the show's not so impressive.",
    "Remember: Your landlord should fix your leaky faucet, not your lottery tickets.",
    "A good deal shouldn't require your social security number AND your favorite childhood pet's name.",
  ],
  spanish: [
    "Si suena demasiado bueno para ser verdad, probablemente viene con c├бmaras ocultas y un presentador de televisi├│n.",
    "Los estafadores son como malos magos: una vez que conoces el truco, el espect├бculo no es tan impresionante.",
    "Recuerda: tu casero deber├нa arreglar el grifo que gotea, no tus boletos de loter├нa.",
    "Un buen trato no deber├нa requerir tu n├║mero de seguro social Y el nombre de tu mascota favorita de la infancia.",
  ],
  chinese: [
    "хжВцЮЬхе╜х╛Чф╗дф║║щЪ╛ф╗еч╜оф┐бя╝МщВгхПпшГ╜шГМхРОцЬЙцСДхГПцЬ║хТМчФ╡шзЖф╕╗цМБф║║уАВ",
    "щкЧхнРх░▒хГПч│Яч│ХчЪДщнФцЬпх╕ИтАФтАФф╕АцЧжф╜ачЯещБУф║ЖшпАчкНя╝Мшбиц╝Фх░▒ф╕НщВгф╣Иф╗дф║║хН░ш▒бц╖▒хИ╗ф║ЖуАВ",
    "шо░ф╜Пя╝ЪцИ┐ф╕Ьх║Фшпеф┐очРЖц╝Пц░┤чЪДц░┤щ╛Щхд┤я╝МшАМф╕НцШпх╜йчеиуАВ",
    "ф╕Аф╕кхе╜ф║дцШУф╕Нх║ФшпещЬАшжБф╜ачЪДчд╛ф╝ЪхоЙхЕихП╖чаБхТМф╜ачлех╣┤цЬАхЦЬцмвчЪДхоачЙйчЪДхРНхнЧуАВ",
  ],
  hindi: [
    "рдЕрдЧрд░ рдпрд╣ рд╕рдЪ рд╣реЛрдиреЗ рдХреЗ рд▓рд┐рдП рдмрд╣реБрдд рдЕрдЪреНрдЫрд╛ рд▓рдЧрддрд╛ рд╣реИ, рддреЛ рд╢рд╛рдпрдж рдЗрд╕рдореЗрдВ рдЫрд┐рдкреЗ рд╣реБрдП рдХреИрдорд░реЗ рдФрд░ рдПрдХ рдЯреАрд╡реА рд╣реЛрд╕реНрдЯ рд╣реИрдВред",
    "рдШреЛрдЯрд╛рд▓реЗрдмрд╛рдЬ рдмреБрд░реЗ рдЬрд╛рджреВрдЧрд░реЛрдВ рдХреА рддрд░рд╣ рд╣реИрдВ - рдПрдХ рдмрд╛рд░ рдЬрдм рдЖрдк рдЪрд╛рд▓ рдЬрд╛рди рд▓реЗрддреЗ рд╣реИрдВ, рддреЛ рд╢реЛ рдЗрддрдирд╛ рдкреНрд░рднрд╛рд╡рд╢рд╛рд▓реА рдирд╣реАрдВ рд░рд╣рддрд╛ред",
    "рдпрд╛рдж рд░рдЦреЗрдВ: рдЖрдкрдХреЗ рдордХрд╛рди рдорд╛рд▓рд┐рдХ рдХреЛ рдЖрдкрдХреЗ рд░рд┐рд╕рддреЗ рдирд▓ рдХреЛ рдареАрдХ рдХрд░рдирд╛ рдЪрд╛рд╣рд┐рдП, рди рдХрд┐ рдЖрдкрдХреЗ рд▓реЙрдЯрд░реА рдЯрд┐рдХрдЯред",
    "рдПрдХ рдЕрдЪреНрдЫреА рдбреАрд▓ рдХреЗ рд▓рд┐рдП рдЖрдкрдХреЗ рд╕реЛрд╢рд▓ рд╕рд┐рдХреНрдпреЛрд░рд┐рдЯреА рдирдВрдмрд░ рдФрд░ рдЖрдкрдХреЗ рдкрд╕рдВрджреАрджрд╛ рдмрдЪрдкрди рдХреЗ рдкрд╛рд▓рддреВ рдЬрд╛рдирд╡рд░ рдХреЗ рдирд╛рдо рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рдирд╣реАрдВ рд╣реЛрдиреА рдЪрд╛рд╣рд┐рдПред",
  ],
  korean: [
    "ыДИым┤ ьвЛьХДьДЬ ьВмьЛдьЭ┤ыЭ╝ъ│а ып┐ъ╕░ ьЦ┤ыа╡ыЛдый┤, ьХДызИыПД ьИиъ▓иьзД ь╣┤ыйФыЭ╝ьЩА TV ьзДэЦЙьЮРъ░А ьЮИьЭД ъ▓БыЛИыЛд.",
    "ьВмъ╕░ъ╛╝ьЭА ьДЬэИмые╕ ызИьИаьВмьЩА ъ░ЩьК╡ыЛИыЛд - ьЭ╝ыЛи эК╕ыжньЭД ьХМый┤ ьЗ╝ъ░А ъ╖╕ыаЗъ▓М ьЭ╕ьГБьаБьЭ┤ьзА ьХКьК╡ыЛИыЛд.",
    "ъ╕░ьЦ╡эХШьД╕ьЪФ: ьзСьг╝ьЭ╕ьЭА ыЛ╣ьЛаьЭШ ым╝ьЭ┤ ьГИыКФ ьИШыПДъ╝ньзАые╝ ъ│аь│РьХ╝ эХШьзА, ыЛ╣ьЛаьЭШ ы│╡ъ╢МьЭД ъ│аь╣ШыКФ ъ▓ГьЭ┤ ьХДыЛЩыЛИыЛд.",
    "ьвЛьЭА ъ▒░ыЮШыКФ ыЛ╣ьЛаьЭШ ьВмэЪМы│┤ьЮеы▓ИэШ╕ьЩА ьЦ┤ыж░ ьЛЬьаИ ьвЛьХДэХШыНШ ьХаьЩДыПЩым╝ьЭШ ьЭ┤ыжДьЭД ьЪФъ╡мэХ┤ьДЬыКФ ьХИ ыРйыЛИыЛд.",
  ],
  bengali: [
    "ржпржжрж┐ ржПржЯрж┐ рж╕рждрзНржпрж┐ржЗ ржЦрзБржм ржнрж╛рж▓рзЛ рж╢рзЛржирж╛ржпрж╝, рждрж╛рж╣рж▓рзЗ рж╕ржорзНржнржмржд ржПрждрзЗ рж▓рзБржХрж╛ржирзЛ ржХрзНржпрж╛ржорзЗрж░рж╛ ржПржмржВ ржПржХржЬржи ржЯрж┐ржнрж┐ рж╣рзЛрж╕рзНржЯ ржЖржЫрзЗред",
    "ржкрзНрж░рждрж╛рж░ржХрж░рж╛ ржЦрж╛рж░рж╛ржк ржЬрж╛ржжрзБржХрж░ржжрзЗрж░ ржорждрзЛ - ржПржХржмрж╛рж░ ржЖржкржирж┐ ржХрзМрж╢рж▓ржЯрж┐ ржЬрзЗржирзЗ ржЧрзЗрж▓рзЗ, рж╢рзЛржЯрж┐ рждрзЗржоржи ржкрзНрж░ржнрж╛ржмрж╢рж╛рж▓рзА ржиржпрж╝ред",
    "ржоржирзЗ рж░рж╛ржЦржмрзЗржи: ржЖржкржирж╛рж░ ржмрж╛ржбрж╝рж┐ржУржпрж╝рж╛рж▓рж╛ ржЖржкржирж╛рж░ ржлрзБржЯрзЛ ржХрж▓рзЗрж░ ржорзЗрж░рж╛ржоржд ржХрж░ржмрзЗ, ржЖржкржирж╛рж░ рж▓ржЯрж╛рж░рж┐ ржЯрж┐ржХрж┐ржЯ ржиржпрж╝ред",
    "ржПржХржЯрж┐ ржнрж╛рж▓рзЛ ржЪрзБржХрзНрждрж┐рждрзЗ ржЖржкржирж╛рж░ рж╕рзЛрж╢рзНржпрж╛рж▓ рж╕рж┐ржХрж┐ржЙрж░рж┐ржЯрж┐ ржиржорзНржмрж░ ржПржмржВ ржЖржкржирж╛рж░ ржЫрзЛржЯржмрзЗрж▓рж╛рж░ ржкрзНрж░рж┐ржпрж╝ ржкрзЛрж╖рж╛ ржкрзНрж░рж╛ржгрзАрж░ ржирж╛ржо ржЙржнржпрж╝ржЗ ржЪрж╛ржУржпрж╝рж╛ ржЙржЪрж┐ржд ржиржпрж╝ред",
  ],
};

// Default mock results in case the API is not available
const defaultMockResults: ScamDetectionResponse = {
  scam_likelihood: "Medium",
  explanation:
    "This listing has some concerning elements. The price is significantly below market average for the area and the landlord is requesting an unusually large deposit via wire transfer.",
  simplified_clauses: [
    {
      text: "Tenant shall pay a security deposit equal to three months' rent via wire transfer within 24 hours of signing this agreement.",
      simplified_text:
        "You must pay 3 months' rent as deposit through wire transfer within 1 day of signing.",
      is_concerning: true,
      reason:
        "Unusually large security deposit and the requirement for wire transfer are red flags.",
    },
    {
      text: "Landlord may enter premises at any time without prior notice for inspection.",
      simplified_text:
        "The landlord can enter your home anytime without telling you first.",
      is_concerning: true,
      reason:
        "This violates standard tenant rights to reasonable notice before entry.",
    },
    {
      text: "The premises shall be used solely as a residence for Tenant(s) named herein.",
      simplified_text:
        "Only the people named in this lease can live in the rental unit.",
      is_concerning: false,
    },
  ],
  suggested_questions: [
    "Can I pay the security deposit after viewing the property in person?",
    "Can we modify the lease to require 24-hour notice before entry?",
    "Is the landlord willing to accept payment methods other than wire transfer?",
    "Can you provide references from current tenants?",
  ],
};

export default function Home() {
  const [language, setLanguage] = useState<Language | null>(null);
  const [currentStep, setCurrentStep] = useState<Step>("language");
  const [randomQuote, setRandomQuote] = useState("");
  const [results, setResults] =
    useState<ScamDetectionResponse>(defaultMockResults);
  const [apiStatus, setApiStatus] = useState<{
    isConnected: boolean;
    message: string;
  }>({
    isConnected: false,
    message: "Checking API connection...",
  });

  // Check API connection on load
  useEffect(() => {
    const checkApiConnection = async () => {
      try {
        const status = await apiService.scamDetection.checkStatus();
        setApiStatus({
          isConnected: true,
          message: status.message,
        });
      } catch (error) {
        console.error("API connection error:", error);
        setApiStatus({
          isConnected: false,
          message: "Using demo mode - API not available",
        });
      }
    };

    checkApiConnection();
  }, []);

  // Update random quote when language changes
  const updateRandomQuote = (lang: Language) => {
    const quotes = funQuotes[lang] || funQuotes.english;
    const randomIndex = Math.floor(Math.random() * quotes.length);
    setRandomQuote(quotes[randomIndex]);
  };

  const handleLanguageSelect = (selectedLanguage: Language) => {
    setLanguage(selectedLanguage);
    updateRandomQuote(selectedLanguage);
    setCurrentStep("form");
  };

  const handleLanguageChange = (newLanguage: Language) => {
    setLanguage(newLanguage);
    updateRandomQuote(newLanguage);
  };

  const handleFormSubmit = (apiResults: ScamDetectionResponse) => {
    setResults(apiResults);
    setCurrentStep("results");
  };

  const handleBackToForm = () => {
    setCurrentStep("form");
  };

  // Determine which component to render based on the current step
  const renderCurrentStep = () => {
    switch (currentStep) {
      case "language":
        return <LanguageSelector onLanguageSelect={handleLanguageSelect} />;
      case "form":
        if (!language) return <div>Language not selected</div>;

        return (
          <ScamDetectionForm language={language} onSubmit={handleFormSubmit} />
        );
      case "results":
        if (!language) return <div>Language not selected</div>;

        return (
          <ScamDetectionResults
            language={language}
            results={results}
            onBack={handleBackToForm}
          />
        );
      default:
        return <div>Something went wrong</div>;
    }
  };

  return (
    <main className="min-h-screen bg-gray-900 text-white relative">
      {/* Fun background elements */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        <div className="absolute -top-10 -left-10 w-40 h-40 rounded-full bg-blue-500/10 blur-3xl"></div>
        <div className="absolute top-1/4 -right-20 w-60 h-60 rounded-full bg-purple-500/10 blur-3xl"></div>
        <div className="absolute bottom-1/3 -left-10 w-40 h-40 rounded-full bg-pink-500/10 blur-3xl"></div>
      </div>

      {/* Header with Language Switcher and API Status */}
      {language && currentStep !== "language" && (
        <header className="sticky top-0 z-40 backdrop-blur-md bg-gray-900/80 border-b border-gray-800">
          <div className="container mx-auto px-4 py-3 flex justify-between items-center">
            <div className="flex items-center gap-2">
              <span className="text-2xl">ЁЯЫбя╕П</span>
              <h1 className="font-bold text-xl">Rent-Spiracy</h1>

              {/* API Status Indicator */}
              <div className="ml-3 hidden md:flex items-center gap-1">
                <span
                  className={`w-2 h-2 rounded-full ${
                    apiStatus.isConnected ? "bg-green-500" : "bg-yellow-500"
                  }`}
                ></span>
                <span className="text-xs text-gray-400">
                  {apiStatus.message}
                </span>
              </div>
            </div>
            <LanguageSwitcher
              currentLanguage={language}
              onLanguageChange={handleLanguageChange}
            />
          </div>
        </header>
      )}

      {/* Main content */}
      <div className="container mx-auto">{renderCurrentStep()}</div>

      {/* Fun quote at the bottom */}
      {randomQuote && currentStep !== "language" && (
        <div className="w-full px-4 py-3 text-center">
          <div className="max-w-3xl mx-auto bg-gray-800/50 p-4 rounded-xl border border-gray-700 italic text-sm text-gray-300">
            &ldquo;{randomQuote}&rdquo;
          </div>
        </div>
      )}

      {/* API Status Footer (mobile) */}
      {apiStatus && language && currentStep !== "language" && (
        <div className="md:hidden w-full px-4 py-2 text-center">
          <div className="flex items-center justify-center gap-1 text-xs text-gray-400">
            <span
              className={`w-2 h-2 rounded-full ${
                apiStatus.isConnected ? "bg-green-500" : "bg-yellow-500"
              }`}
            ></span>
            <span>{apiStatus.message}</span>
          </div>
        </div>
      )}
    </main>
  );
}
